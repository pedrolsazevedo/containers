{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Estudo Cursos Materiais Kubernetes 1.1 Wordpress template 1.2 NGINX LB para RKE2 Docker 2.1 Minio Azure Gateway 2.1 Rancher Cloud 4.1 Azure Collections AZ900 AZ104 AZ305","title":"Home"},{"location":"container/docker/","text":"","title":"Index"},{"location":"container/docker/modelos/minio/","text":"Descri\u00e7\u00e3o \u00b6 Muitas aplica\u00e7\u00f5es, como Longhorn, necessitam de um endpoint S3 para armazenamento em bloco. At\u00e9 o momento a azure n\u00e3o oferece isso de forma nativa no servi\u00e7o. Uma op\u00e7\u00e3o para atender essa necessidade \u00e9 utilizar o Minio Azure Gateway , este modelo de docker compose necessita que voce possua uma Storage Account j\u00e1 criada. YAML version : '3.9' services : minio-azr-s3 : container_name : azure-s3 image : quay.io/minio/minio ports : - '9000:9000' - '9001:9001' volumes : - '/opt/minio/data:/data' environment : # MINIO_ROOT_USER: Usu\u00e1rio administrador para acessar o Minio. - \"MINIO_ROOT_USER=minio_admin_CHANGEME\" # MINIO_ROOT_PASSWORD: Senha para o administrador. - \"MINIO_ROOT_PASSWORD=minio_admin_password_CHANGEME\" # AZURE_STORAGE_ACCOUNT: Nome da StorageAccount que voc\u00ea criou. - \"AZURE_STORAGE_ACCOUNT=storage_account_name\" # AZURE_STORAGE_KEY: Chave de acesso da StorageAccount. - \"AZURE_STORAGE_KEY=storage_account_key\" command : gateway azure --console-address \":9001\" deploy : restart_policy : condition : on-failure max_attempts : 3 Documenta\u00e7\u00e3o Oficial \u00b6 Minio Mini Azure Gateway doc: 1 doc: 2","title":"Minio Azure Gateway"},{"location":"container/docker/modelos/minio/#descricao","text":"Muitas aplica\u00e7\u00f5es, como Longhorn, necessitam de um endpoint S3 para armazenamento em bloco. At\u00e9 o momento a azure n\u00e3o oferece isso de forma nativa no servi\u00e7o. Uma op\u00e7\u00e3o para atender essa necessidade \u00e9 utilizar o Minio Azure Gateway , este modelo de docker compose necessita que voce possua uma Storage Account j\u00e1 criada. YAML version : '3.9' services : minio-azr-s3 : container_name : azure-s3 image : quay.io/minio/minio ports : - '9000:9000' - '9001:9001' volumes : - '/opt/minio/data:/data' environment : # MINIO_ROOT_USER: Usu\u00e1rio administrador para acessar o Minio. - \"MINIO_ROOT_USER=minio_admin_CHANGEME\" # MINIO_ROOT_PASSWORD: Senha para o administrador. - \"MINIO_ROOT_PASSWORD=minio_admin_password_CHANGEME\" # AZURE_STORAGE_ACCOUNT: Nome da StorageAccount que voc\u00ea criou. - \"AZURE_STORAGE_ACCOUNT=storage_account_name\" # AZURE_STORAGE_KEY: Chave de acesso da StorageAccount. - \"AZURE_STORAGE_KEY=storage_account_key\" command : gateway azure --console-address \":9001\" deploy : restart_policy : condition : on-failure max_attempts : 3","title":"Descri\u00e7\u00e3o"},{"location":"container/docker/modelos/minio/#documentacao-oficial","text":"Minio Mini Azure Gateway doc: 1 doc: 2","title":"Documenta\u00e7\u00e3o Oficial"},{"location":"container/docker/modelos/rancher/","text":"Docker docker run -dit -name rancher-ui --restart = unless-stopped \\ -p 80 :80 -p 443 :443 \\ -v /opt/rancher:/var/lib/rancher \\ --privileged \\ rancher/rancher:latest YAML version : '3.9' services : rancher : image : 'rancher/rancher:latest' container_name : rancher-server privileged : true restart : unless-stopped ports : - '80:80' - '443:443' volumes : - '/opt/rancher:/var/lib/rancher'","title":"Rancher"},{"location":"container/kubernetes/","text":"Modelos b\u00e1sicos \u00b6 Criei esse reposit\u00f3rio para armazenar templates que acabo usando no dia a dia ou para estudo. Kubernetes \u00b6 Wordpress Modelo de wordpress utilizando: Banco de dados externo. HPA (Horizontal Pod Autoscalling). Armazenamento com Longhorn e AzureFils. CronJob para c\u00f3pia di\u00e1ria dos dados. Ingress. NGINX LB para RKE2 Modelo cria 5 regras, que foram usadas para balancear tr\u00e1fego entre os n\u00f3s de um cluster RKE2. As regras s\u00e3o: Redirecionamento das requisi\u00e7\u00f5es HTTP para HTTPS usando HTTPCODE 301. N\u00f3s control-plane porta 6443 # Porta usada para requisi\u00e7\u00f5es \u00e0 Kube-API. N\u00f3s control-plane porta 443 # Porta usada para tr\u00e1fego HTTPS. N\u00f3s control-plane porta 9345 # Porta usada para join dos n\u00f3s ao cluster. N\u00f3s workers porta 443 # Trafego para as requisi\u00e7\u00f5es HTTPS.","title":"Modelos b\u00e1sicos"},{"location":"container/kubernetes/#modelos-basicos","text":"Criei esse reposit\u00f3rio para armazenar templates que acabo usando no dia a dia ou para estudo.","title":"Modelos b\u00e1sicos"},{"location":"container/kubernetes/#kubernetes","text":"Wordpress Modelo de wordpress utilizando: Banco de dados externo. HPA (Horizontal Pod Autoscalling). Armazenamento com Longhorn e AzureFils. CronJob para c\u00f3pia di\u00e1ria dos dados. Ingress. NGINX LB para RKE2 Modelo cria 5 regras, que foram usadas para balancear tr\u00e1fego entre os n\u00f3s de um cluster RKE2. As regras s\u00e3o: Redirecionamento das requisi\u00e7\u00f5es HTTP para HTTPS usando HTTPCODE 301. N\u00f3s control-plane porta 6443 # Porta usada para requisi\u00e7\u00f5es \u00e0 Kube-API. N\u00f3s control-plane porta 443 # Porta usada para tr\u00e1fego HTTPS. N\u00f3s control-plane porta 9345 # Porta usada para join dos n\u00f3s ao cluster. N\u00f3s workers porta 443 # Trafego para as requisi\u00e7\u00f5es HTTPS.","title":"Kubernetes"},{"location":"container/kubernetes/modelos/NGINX/","text":"YAML # docker-compose.yaml version : '3.9' services : nginx : container_name : nginx-lb labels : - app=nginx - function=loadbalancer restart : unless-stopped ports : - '80:80' - '443:443' - '6443:6443' - '9345:9345' volumes : - '/opt/nginx/nginx.conf:/etc/nginx/nginx.conf' image : 'nginx:latest' Text Only # nginx.conf worker_processes 4; worker_rlimit_nofile 40000; events { worker_connections 8192; } http { server { listen 80; return 301 https://$host$request_uri; } } stream { ## LB for the RKE ## KUBE-API upstream rke2_api { server 10.21.250.67:6443 max_fails=3 fail_timeout=5s; server 10.21.250.68:6443 max_fails=3 fail_timeout=5s; server 10.21.250.69:6443 max_fails=3 fail_timeout=5s; least_conn; } ## Master upstream rke2_master { server 10.21.250.67:443 max_fails=3 fail_timeout=5s; server 10.21.250.68:443 max_fails=3 fail_timeout=5s; server 10.21.250.69:443 max_fails=3 fail_timeout=5s; least_conn; } ## Node register in Master upstream rke2_register { server 10.21.250.67:9345 max_fails=3 fail_timeout=5s; server 10.21.250.68:9345 max_fails=3 fail_timeout=5s; server 10.21.250.69:9345 max_fails=3 fail_timeout=5s; least_conn; } ## LB for the K8S Workers upstream rke2_workers { least_conn; server 10.21.250.76:443 max_fails=3 fail_timeout=5s; server 10.21.250.77:443 max_fails=3 fail_timeout=5s; server 10.21.250.78:443 max_fails=3 fail_timeout=5s; } server { listen 443; proxy_pass rke2_workers; } server { listen 6443; proxy_pass rke2_api; } server { listen 9345; proxy_pass rke2_register; } }","title":"NGNIX"},{"location":"container/kubernetes/modelos/wordpress/","text":"Template Wordpress \u00b6 Meu primeiro deployment em produ\u00e7\u00e3o foram algumas inst\u00e2ncias de wordpress CMS rodando em AKS. Esse modelo utiliza Ingress NGINX, M\u00e9tricas, e dois drivers de storage class Azure Files e Longhorn. Reposit\u00f3rio GitHub Descri\u00e7\u00e3o dos objetos \u00b6 00-wp-namespace.yaml Esse arquivo cria o grupo onde os recursos ser\u00e3o criados e executados. 01-wp-pvc.yaml Este arquivo cria dois PVC, um com a storageclass Longhorn e outro com AzureFiles. A aplica\u00e7\u00e3o fica alocada ao volume criado no longhorn, utilizamos o azurefiles para que o pod no cronjob crie um backup di\u00e1rio dos arquivos da aplica\u00e7\u00e3o. wp-pvc-longhorn-claim Tamanho: 5Gi StorageClass: longhorn Modo de leitura: ReadWriteMany Descri\u00e7\u00e3o: Permite que todos os pods acessem o volume. wp-pvc-azurefiles-claim Tamanho: 15Gi StorageClass: azurefile Modo de leitura: ReadWriteOnce Descri\u00e7\u00e3o: Volume \u00e9 montado uma vez por dia, no pod que faz o backup. 02-wp-configmap-secrets.yaml Este arquivo cria um ConfigMap com o .htaccess e um secret para armazenar as credenciais de banco. wp-cm-htaccess Criei este ConfigMap para facilitar quando for necess\u00e1rio aumentar o valor do upload_max_filesize e configura\u00e7\u00f5es necess\u00e1rias para enviar arquivos mais pesados. wp-cm-dbcred Para configurar as credenciais de banco, os valores precis\u00e3o ser convertidos para base64 e ajustados no arquivo, isso far\u00e1 com que cada container no pod receba o valor como uma vari\u00e1vel de ambiente. 03-wp-deployment.yaml Este \u00e9 o principal arquivo, ele ir\u00e1 criar um deployment que criar\u00e1 e configurar\u00e1 os pods nos nods para disponibilizarem a aplica\u00e7\u00e3o. A imagem base utilizada \u00e9: YAML image : wordpress:php8.1-apache Possuimos limita\u00e7\u00e3o de recursos para cada pod: YAML resources : cpu : requests : 100mi (Valor requisitado quando o pod \u00e9 criado) limit : 200mi (Valor m\u00e1ximo que pode ser alocado para cada pod) memory : requests : 256Mi (Valor requisitado quando o pod \u00e9 criado) limit : 512Mi (Valor m\u00e1ximo que pode ser alocado para cada pod) 04-wp-hpa.yaml Este arquivo criar\u00e1 a configura\u00e7\u00e3o de dimensionamento autom\u00e1tico horizontal, que garante uma quantidade minima e m\u00e1xima de r\u00e9plicas dos pods rodando de acordo com a necessidade. Seu cluster acompanha o consumo dos pods e compara, total do consumo com o valor m\u00e1ximo definido pelo limit no arquivo anterior, e caso atinga o percentual abaixo ele provisionar\u00e1 um novo pod. Caso o consumo reduza, ele reduzir\u00e1 a quantidade de pods de maneira automatica tambem. Defini\u00e7\u00e3o do minimo e m\u00e1ximo de pods que rodar\u00e3o YAML minReplicas : 1 # (Minimo de pods rodando) maxReplicas : 6 # (M\u00e1ximo de pods rodando) Percentual de recurso que o kubernetes dever\u00e1 considerar para escalar os pods YAML resources : cpu : targetAverageUtilization : 80 # (Percentual de uso m\u00e9dio do processador para fazer o escalonamento) memory : targetAverageUtilization : 80 # Percentual de uso m\u00e9dio de mem\u00f3ria para fazer o escalonamento 05-wp-backupfile-cronjob.yaml Este arquivo cria um CronJob que ser\u00e1 executado todo dia \u00e0 01:01. Durante a execu\u00e7\u00e3o o pod ir\u00e1 criar um arquivo compactado do conteudo do wordpress e guardar\u00e1 no armazenamento do AzureFiles. Para alterar o hor\u00e1rio de execu\u00e7\u00e3o, basta alterar o seguimento schedule no arquivo. YAML schedule : \"1 1 * * *\" 06-wp-service-ingress.yaml Este arquivo cria dois componentes que possibilitam o acesso aos recursos que voce criou: * Service Cria uma exposi\u00e7\u00e3o dos pods no namespace, para que voce possa acessar a porta configurada ou com port-forwarding ou com o ingress, por exemplo. Ingress O ingress \u00e9 o respons\u00e1vel por expor as rotas de acesso para fora do cluster. Documenta\u00e7\u00e3o oficial \u00b6 Namespace Persistent Volumes ConfigMap Secret Deployments Horizontal Pod Autoscaling CronJob Service Ingress","title":"Wordpress"},{"location":"container/kubernetes/modelos/wordpress/#template-wordpress","text":"Meu primeiro deployment em produ\u00e7\u00e3o foram algumas inst\u00e2ncias de wordpress CMS rodando em AKS. Esse modelo utiliza Ingress NGINX, M\u00e9tricas, e dois drivers de storage class Azure Files e Longhorn. Reposit\u00f3rio GitHub","title":"Template Wordpress"},{"location":"container/kubernetes/modelos/wordpress/#descricao-dos-objetos","text":"00-wp-namespace.yaml Esse arquivo cria o grupo onde os recursos ser\u00e3o criados e executados. 01-wp-pvc.yaml Este arquivo cria dois PVC, um com a storageclass Longhorn e outro com AzureFiles. A aplica\u00e7\u00e3o fica alocada ao volume criado no longhorn, utilizamos o azurefiles para que o pod no cronjob crie um backup di\u00e1rio dos arquivos da aplica\u00e7\u00e3o. wp-pvc-longhorn-claim Tamanho: 5Gi StorageClass: longhorn Modo de leitura: ReadWriteMany Descri\u00e7\u00e3o: Permite que todos os pods acessem o volume. wp-pvc-azurefiles-claim Tamanho: 15Gi StorageClass: azurefile Modo de leitura: ReadWriteOnce Descri\u00e7\u00e3o: Volume \u00e9 montado uma vez por dia, no pod que faz o backup. 02-wp-configmap-secrets.yaml Este arquivo cria um ConfigMap com o .htaccess e um secret para armazenar as credenciais de banco. wp-cm-htaccess Criei este ConfigMap para facilitar quando for necess\u00e1rio aumentar o valor do upload_max_filesize e configura\u00e7\u00f5es necess\u00e1rias para enviar arquivos mais pesados. wp-cm-dbcred Para configurar as credenciais de banco, os valores precis\u00e3o ser convertidos para base64 e ajustados no arquivo, isso far\u00e1 com que cada container no pod receba o valor como uma vari\u00e1vel de ambiente. 03-wp-deployment.yaml Este \u00e9 o principal arquivo, ele ir\u00e1 criar um deployment que criar\u00e1 e configurar\u00e1 os pods nos nods para disponibilizarem a aplica\u00e7\u00e3o. A imagem base utilizada \u00e9: YAML image : wordpress:php8.1-apache Possuimos limita\u00e7\u00e3o de recursos para cada pod: YAML resources : cpu : requests : 100mi (Valor requisitado quando o pod \u00e9 criado) limit : 200mi (Valor m\u00e1ximo que pode ser alocado para cada pod) memory : requests : 256Mi (Valor requisitado quando o pod \u00e9 criado) limit : 512Mi (Valor m\u00e1ximo que pode ser alocado para cada pod) 04-wp-hpa.yaml Este arquivo criar\u00e1 a configura\u00e7\u00e3o de dimensionamento autom\u00e1tico horizontal, que garante uma quantidade minima e m\u00e1xima de r\u00e9plicas dos pods rodando de acordo com a necessidade. Seu cluster acompanha o consumo dos pods e compara, total do consumo com o valor m\u00e1ximo definido pelo limit no arquivo anterior, e caso atinga o percentual abaixo ele provisionar\u00e1 um novo pod. Caso o consumo reduza, ele reduzir\u00e1 a quantidade de pods de maneira automatica tambem. Defini\u00e7\u00e3o do minimo e m\u00e1ximo de pods que rodar\u00e3o YAML minReplicas : 1 # (Minimo de pods rodando) maxReplicas : 6 # (M\u00e1ximo de pods rodando) Percentual de recurso que o kubernetes dever\u00e1 considerar para escalar os pods YAML resources : cpu : targetAverageUtilization : 80 # (Percentual de uso m\u00e9dio do processador para fazer o escalonamento) memory : targetAverageUtilization : 80 # Percentual de uso m\u00e9dio de mem\u00f3ria para fazer o escalonamento 05-wp-backupfile-cronjob.yaml Este arquivo cria um CronJob que ser\u00e1 executado todo dia \u00e0 01:01. Durante a execu\u00e7\u00e3o o pod ir\u00e1 criar um arquivo compactado do conteudo do wordpress e guardar\u00e1 no armazenamento do AzureFiles. Para alterar o hor\u00e1rio de execu\u00e7\u00e3o, basta alterar o seguimento schedule no arquivo. YAML schedule : \"1 1 * * *\" 06-wp-service-ingress.yaml Este arquivo cria dois componentes que possibilitam o acesso aos recursos que voce criou: * Service Cria uma exposi\u00e7\u00e3o dos pods no namespace, para que voce possa acessar a porta configurada ou com port-forwarding ou com o ingress, por exemplo. Ingress O ingress \u00e9 o respons\u00e1vel por expor as rotas de acesso para fora do cluster.","title":"Descri\u00e7\u00e3o dos objetos"},{"location":"container/kubernetes/modelos/wordpress/#documentacao-oficial","text":"Namespace Persistent Volumes ConfigMap Secret Deployments Horizontal Pod Autoscaling CronJob Service Ingress","title":"Documenta\u00e7\u00e3o oficial"},{"location":"docs-en/wordpress%20ENG/","text":"Wordpress \u00b6 My first template in this repo is a model for a deployment of Wordpress CMS. It relies on Ngingx Ingress, Longhorn and Azure Files storage class. Description 1.1 00-wp-namespace.yaml Namespace This file create the namespace to host all the artifacts created 1.2 01-wp-pvc.yaml Persistent Volumes This file creates the volume following volume claim: wp-pvc-longhorn-claim Size: 5Gi StorageClass: longhorn ReadMode: ReadWriteMany (Allows all pods to claim the volume) wp-pvc-azurefiles-claim Size: 15Gi StorageClass: azurefile ReadMode: ReadWriteOnce (The volume is claimed only once per day.) 1.3 02-wp-configmap-secrets.yaml ConfigMap Secret This files creates a configmap with the .htaccess file and a secret with the database credentials. wp-cm-htaccess I've created the .htaccess in a secret so I can manage the upload more easily wp-cm-dbcred Convert the text all credentials to base64 and change in each string. 1.4 03-wp-deployment.yaml Deployments This is the \"main\" file, it will create a deployment that will create a replicaset that allows the application to run on the nodes image: wordpress:php8.0-apache resources: cpu: requests: 100mi (Value requested on a pod is created) limit: 200mi (Total that a pod can request) memory: requests: 256Mi (Value requested on a pod is created) limit: 512Mi (Total that a pod can request) 1.5 04-wp-hpa.yaml Horizontal Pod Autoscaling This file will create the configuration for autoscaling your deployment, it will ensure that you have a amount of pods between your minimum and maximum replicas. With the monitoring in your cluster, when the pods keeps a load average equal or bigger than what's defined in this file, the control plane will create more pods to delivery divide the load between them. minReplicas: 1 (Minimum replicas that will run) maxReplicas: 6 (Max replicas that the scheduling will create) resources: cpu: targetAverageUtilization: 80 (The raw value will be converted to percentage of resource usage) memory: targetAverageUtilization: 80 (The raw value will be converted to percentage of resource usage) 1.6 05-wp-backupfile-cronjob.yaml \u200b This file creates a CronJob that will run everyday at 01:01 and run a copy from the longhorn PVC to the azure PVC","title":"wordpress ENG"},{"location":"docs-en/wordpress%20ENG/#wordpress","text":"My first template in this repo is a model for a deployment of Wordpress CMS. It relies on Ngingx Ingress, Longhorn and Azure Files storage class. Description 1.1 00-wp-namespace.yaml Namespace This file create the namespace to host all the artifacts created 1.2 01-wp-pvc.yaml Persistent Volumes This file creates the volume following volume claim: wp-pvc-longhorn-claim Size: 5Gi StorageClass: longhorn ReadMode: ReadWriteMany (Allows all pods to claim the volume) wp-pvc-azurefiles-claim Size: 15Gi StorageClass: azurefile ReadMode: ReadWriteOnce (The volume is claimed only once per day.) 1.3 02-wp-configmap-secrets.yaml ConfigMap Secret This files creates a configmap with the .htaccess file and a secret with the database credentials. wp-cm-htaccess I've created the .htaccess in a secret so I can manage the upload more easily wp-cm-dbcred Convert the text all credentials to base64 and change in each string. 1.4 03-wp-deployment.yaml Deployments This is the \"main\" file, it will create a deployment that will create a replicaset that allows the application to run on the nodes image: wordpress:php8.0-apache resources: cpu: requests: 100mi (Value requested on a pod is created) limit: 200mi (Total that a pod can request) memory: requests: 256Mi (Value requested on a pod is created) limit: 512Mi (Total that a pod can request) 1.5 04-wp-hpa.yaml Horizontal Pod Autoscaling This file will create the configuration for autoscaling your deployment, it will ensure that you have a amount of pods between your minimum and maximum replicas. With the monitoring in your cluster, when the pods keeps a load average equal or bigger than what's defined in this file, the control plane will create more pods to delivery divide the load between them. minReplicas: 1 (Minimum replicas that will run) maxReplicas: 6 (Max replicas that the scheduling will create) resources: cpu: targetAverageUtilization: 80 (The raw value will be converted to percentage of resource usage) memory: targetAverageUtilization: 80 (The raw value will be converted to percentage of resource usage) 1.6 05-wp-backupfile-cronjob.yaml \u200b This file creates a CronJob that will run everyday at 01:01 and run a copy from the longhorn PVC to the azure PVC","title":"Wordpress"},{"location":"estudos/","text":"","title":"Index"},{"location":"estudos/azure/az104/","text":"01 - Prerequisites for Azure administrators https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/ 02 - Manage identities and governance in Azure https://docs.microsoft.com/en-us/learn/paths/az-104-manage-identities-governance/ 03 - Implement and manage storage in Azure https://docs.microsoft.com/en-us/learn/paths/az-104-manage-storage 04 - Deploy and manage Azure compute resources https://docs.microsoft.com/en-us/learn/paths/az-104-manage-compute-resources/ 05 - Configure and manage virtual networks for Azure administrators https://docs.microsoft.com/en-us/learn/paths/az-104-manage-virtual-networks/ 06 - Monitor and back up Azure resources https://docs.microsoft.com/en-us/learn/paths/az-104-monitor-backup-resources/","title":"AZ-104 Azure Administrator"},{"location":"estudos/azure/az305/","text":"AZ-305 - Collection: https://docs.microsoft.com/en-us/users/pedrolsazevedo/collections/4zpbm0ok7oqg0","title":"AZ-305 Azure Architect"},{"location":"estudos/azure/az900/","text":"Princ\u00edpios B\u00e1sicos do Azure 1 - Princ\u00edpios B\u00e1sicos do Azure https://docs.microsoft.com/pt-br/learn/paths/az-900-describe-cloud-concepts/","title":"AZ-900 Azure Fundamentals"},{"location":"estudos/devops/cursos/","text":"Gratuitos \u00b6 Container Fundamentals (PT-BR) https://4linux.com.br/cursos/treinamento/linux-fundamentals/ DevOps Essentials (PT-BR) https://4linux.com.br/cursos/treinamento/devops-essentials/ Up and Running: Rancher (EN-US) https://community.suse.com/courses/5804003/ Up and Running: K3s (EN-US) https://community.suse.com/courses/6599524/ KubeAcademy by VMware (EN-US) https://kube.academy/ GitOps Fundamentals (ArgoCD) (EN-US) https://codefresh.learnworlds.com/ Docker Tutorial for Beginners - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=3c-iBn73dDE Kubernetes Crash Course for Absolute Beginners - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=s_o8dwzRlu4 Kubernetes Tutorial for Beginners [FULL COURSE in 4 Hours] - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=X48VuDVv0do","title":"Cursos"},{"location":"estudos/devops/cursos/#gratuitos","text":"Container Fundamentals (PT-BR) https://4linux.com.br/cursos/treinamento/linux-fundamentals/ DevOps Essentials (PT-BR) https://4linux.com.br/cursos/treinamento/devops-essentials/ Up and Running: Rancher (EN-US) https://community.suse.com/courses/5804003/ Up and Running: K3s (EN-US) https://community.suse.com/courses/6599524/ KubeAcademy by VMware (EN-US) https://kube.academy/ GitOps Fundamentals (ArgoCD) (EN-US) https://codefresh.learnworlds.com/ Docker Tutorial for Beginners - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=3c-iBn73dDE Kubernetes Crash Course for Absolute Beginners - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=s_o8dwzRlu4 Kubernetes Tutorial for Beginners [FULL COURSE in 4 Hours] - TechWorld with Nana (EN-US) https://www.youtube.com/watch?v=X48VuDVv0do","title":"Gratuitos"},{"location":"estudos/devops/materiais/","text":"Leitura recomendada \u00b6 Gloss\u00e1rio de termos https://kubernetes.io/pt-br/docs/reference/glossary/?fundamental=true https://docs.docker.com/glossary/ Docker \u00b6 Hector Vido - Docker https://hectorvido.dev/docker LinuxTips - Descomplicando Docker https://github.com/badtuxx/DescomplicandoDocker Kubernetes \u00b6 Hector Vido - Kubernetes https://github.com/hector-vido/kubernetes LinuxTips - Descomplicando Kubernetes https://github.com/badtuxx/DescomplicandoKubernetes Outras ferramentas DevOps \u00b6 LinuxTips - Descomplicando GitLab https://github.com/badtuxx/DescomplicandoGitlab Rafael Cirolini - Prometheus e Grafana https://github.com/cirolini/prometheus-curso-monitoring","title":"Materiais"},{"location":"estudos/devops/materiais/#leitura-recomendada","text":"Gloss\u00e1rio de termos https://kubernetes.io/pt-br/docs/reference/glossary/?fundamental=true https://docs.docker.com/glossary/","title":"Leitura recomendada"},{"location":"estudos/devops/materiais/#docker","text":"Hector Vido - Docker https://hectorvido.dev/docker LinuxTips - Descomplicando Docker https://github.com/badtuxx/DescomplicandoDocker","title":"Docker"},{"location":"estudos/devops/materiais/#kubernetes","text":"Hector Vido - Kubernetes https://github.com/hector-vido/kubernetes LinuxTips - Descomplicando Kubernetes https://github.com/badtuxx/DescomplicandoKubernetes","title":"Kubernetes"},{"location":"estudos/devops/materiais/#outras-ferramentas-devops","text":"LinuxTips - Descomplicando GitLab https://github.com/badtuxx/DescomplicandoGitlab Rafael Cirolini - Prometheus e Grafana https://github.com/cirolini/prometheus-curso-monitoring","title":"Outras ferramentas DevOps"}]}